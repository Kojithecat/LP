
data Tree a = Node a (Tree a) (Tree a) | Empty    deriving (Show)

size :: Tree a -> Int
size Empty = 0
size (Node _ es dr)= 1+ size dr + size es 
     
height :: Tree a -> Int
height Empty = 0
height (Node _ es dr)= 1+ max (height es) (height dr)

equal :: Eq a => Tree a -> Tree a -> Bool
equal Empty Empty = True
equal (Node a aeq adr) (Node b beq bdr) = a == b && equal aeq beq && equal adr bdr

isomorphic :: Eq a => Tree a -> Tree a -> Bool
isomorphic Empty Empty = True
isomorphic (Node a aeq adr) (Node b beq bdr) = (a == b && ((equal aeq beq && equal adr bdr) || (equal aeq bdr && equal adr beq)))

preOrder :: Tree a -> [a]
preOrder Empty = []
preOrder (Node a eq dr) = [a]++ preOrder eq ++ preOrder dr

postOrder :: Tree a -> [a]
postOrder Empty = []
postOrder (Node a eq dr) = postOrder eq ++ postOrder dr ++ [a]

inOrder :: Tree a -> [a]
inOrder Empty = []
inOrder (Node a eq dr) = inOrder eq++ [a] ++ inOrder dr

breadthFirst :: Tree a -> [a]
breadthFirst t = bf [t]
    where 
        bf :: [Tree a]->[a]
        bf [] = []
        bf (Empty:ts) = bf ts
        bf ((Node a eq dr):ts) = [a]++ bf (ts++[eq,dr])


main = do
  let t7 = Node 7 Empty Empty
  let t6 = Node 6 Empty Empty
  let t5 = Node 5 Empty Empty
  let t4 = Node 4 Empty Empty
  let t3 = Node 3 t6 t7
  let t2 = Node 2 t4 t5
  let t1 = Node 1 t2 t3
  let t1' = Node 1 t3 t2
  print (size t1)
  print (height t1)
  print (equal t2 t3)
  print (isomorphic t1 t1')
  print (preOrder t1)
  print (postOrder t1)
  print (inOrder t1)
  print (breadthFirst t1)
