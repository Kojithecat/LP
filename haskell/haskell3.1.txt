myMap :: (a -> b) -> [a] -> [b]

myMap f a = [f x | x <- a ]

myFilter :: (a -> Bool) -> [a] -> [a]

myFilter f a = [x| x<-a, f x ]

myZipWith :: (a -> b -> c) -> [a] -> [b] -> [c]

myZipWith f a b = [f (fst x) (snd x)| x<-zip a b]

thingify :: [Int] -> [Int] -> [(Int, Int)]

thingify l1 l2 = [(x,y)| x<-l1, y<-l2, mod x y == 0 ]

factors :: Int -> [Int]

factors a = [x| x<-[1..a], mod a x == 0]